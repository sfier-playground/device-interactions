// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sifer169966/device-interactions/internal/core/domain"
)

// MockServiceDeviceInteractor is a mock of ServiceDeviceInteractor interface.
type MockServiceDeviceInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDeviceInteractorMockRecorder
}

// MockServiceDeviceInteractorMockRecorder is the mock recorder for MockServiceDeviceInteractor.
type MockServiceDeviceInteractorMockRecorder struct {
	mock *MockServiceDeviceInteractor
}

// NewMockServiceDeviceInteractor creates a new mock instance.
func NewMockServiceDeviceInteractor(ctrl *gomock.Controller) *MockServiceDeviceInteractor {
	mock := &MockServiceDeviceInteractor{ctrl: ctrl}
	mock.recorder = &MockServiceDeviceInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDeviceInteractor) EXPECT() *MockServiceDeviceInteractorMockRecorder {
	return m.recorder
}

// Submit mocks base method.
func (m *MockServiceDeviceInteractor) Submit(in domain.DeviceSubmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockServiceDeviceInteractorMockRecorder) Submit(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockServiceDeviceInteractor)(nil).Submit), in)
}
